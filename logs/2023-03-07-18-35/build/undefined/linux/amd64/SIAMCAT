+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''SIAMCAT'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'?repositories' for details

replacement repositories:
    CRAN: https://cloud.r-project.org

Bioconductor version 3.16 (BiocManager 1.30.19), R 4.2.2 Patched (2022-11-10
  r83330)
Installing package(s) 'SIAMCAT'
also installing the dependencies ‘minqa’, ‘nloptr’, ‘checkmate’, ‘mlbench’, ‘mlr3measures’, ‘mlr3misc’, ‘palmerpenguins’, ‘shape’, ‘lme4’, ‘numDeriv’, ‘bbotk’, ‘mlr3’, ‘beanplot’, ‘glmnet’, ‘gridBase’, ‘LiblineaR’, ‘pROC’, ‘PRROC’, ‘infotheo’, ‘corrplot’, ‘lmerTest’, ‘mlr3learners’, ‘mlr3tuning’, ‘paradox’, ‘lgr’

trying URL 'https://cloud.r-project.org/src/contrib/minqa_1.2.5.tar.gz'
Content type 'application/x-gzip' length 54415 bytes (53 KB)
==================================================
downloaded 53 KB

trying URL 'https://cloud.r-project.org/src/contrib/nloptr_2.0.3.tar.gz'
Content type 'application/x-gzip' length 2219877 bytes (2.1 MB)
==================================================
downloaded 2.1 MB

trying URL 'https://cloud.r-project.org/src/contrib/checkmate_2.1.0.tar.gz'
Content type 'application/x-gzip' length 170034 bytes (166 KB)
==================================================
downloaded 166 KB

trying URL 'https://cloud.r-project.org/src/contrib/mlbench_2.1-3.tar.gz'
Content type 'application/x-gzip' length 922103 bytes (900 KB)
==================================================
downloaded 900 KB

trying URL 'https://cloud.r-project.org/src/contrib/mlr3measures_0.5.0.tar.gz'
Content type 'application/x-gzip' length 41055 bytes (40 KB)
==================================================
downloaded 40 KB

trying URL 'https://cloud.r-project.org/src/contrib/mlr3misc_0.11.0.tar.gz'
Content type 'application/x-gzip' length 85199 bytes (83 KB)
==================================================
downloaded 83 KB

trying URL 'https://cloud.r-project.org/src/contrib/palmerpenguins_0.1.1.tar.gz'
Content type 'application/x-gzip' length 2995960 bytes (2.9 MB)
==================================================
downloaded 2.9 MB

trying URL 'https://cloud.r-project.org/src/contrib/shape_1.4.6.tar.gz'
Content type 'application/x-gzip' length 677262 bytes (661 KB)
==================================================
downloaded 661 KB

trying URL 'https://cloud.r-project.org/src/contrib/lme4_1.1-31.tar.gz'
Content type 'application/x-gzip' length 2947739 bytes (2.8 MB)
==================================================
downloaded 2.8 MB

trying URL 'https://cloud.r-project.org/src/contrib/numDeriv_2016.8-1.1.tar.gz'
Content type 'application/x-gzip' length 76053 bytes (74 KB)
==================================================
downloaded 74 KB

trying URL 'https://cloud.r-project.org/src/contrib/bbotk_0.7.2.tar.gz'
Content type 'application/x-gzip' length 108542 bytes (105 KB)
==================================================
downloaded 105 KB

trying URL 'https://cloud.r-project.org/src/contrib/mlr3_0.14.1.tar.gz'
Content type 'application/x-gzip' length 501519 bytes (489 KB)
==================================================
downloaded 489 KB

trying URL 'https://cloud.r-project.org/src/contrib/beanplot_1.3.1.tar.gz'
Content type 'application/x-gzip' length 307297 bytes (300 KB)
==================================================
downloaded 300 KB

trying URL 'https://cloud.r-project.org/src/contrib/glmnet_4.1-6.tar.gz'
Content type 'application/x-gzip' length 2436305 bytes (2.3 MB)
==================================================
downloaded 2.3 MB

trying URL 'https://cloud.r-project.org/src/contrib/gridBase_0.4-7.tar.gz'
Content type 'application/x-gzip' length 153373 bytes (149 KB)
==================================================
downloaded 149 KB

trying URL 'https://cloud.r-project.org/src/contrib/LiblineaR_2.10-22.tar.gz'
Content type 'application/x-gzip' length 47738 bytes (46 KB)
==================================================
downloaded 46 KB

trying URL 'https://cloud.r-project.org/src/contrib/pROC_1.18.0.tar.gz'
Content type 'application/x-gzip' length 688430 bytes (672 KB)
==================================================
downloaded 672 KB

trying URL 'https://cloud.r-project.org/src/contrib/PRROC_1.3.1.tar.gz'
Content type 'application/x-gzip' length 335708 bytes (327 KB)
==================================================
downloaded 327 KB

trying URL 'https://cloud.r-project.org/src/contrib/infotheo_1.2.0.1.tar.gz'
Content type 'application/x-gzip' length 8337 bytes
==================================================
downloaded 8337 bytes

trying URL 'https://cloud.r-project.org/src/contrib/corrplot_0.92.tar.gz'
Content type 'application/x-gzip' length 3765850 bytes (3.6 MB)
==================================================
downloaded 3.6 MB

trying URL 'https://cloud.r-project.org/src/contrib/lmerTest_3.1-3.tar.gz'
Content type 'application/x-gzip' length 195633 bytes (191 KB)
==================================================
downloaded 191 KB

trying URL 'https://cloud.r-project.org/src/contrib/mlr3learners_0.5.6.tar.gz'
Content type 'application/x-gzip' length 56939 bytes (55 KB)
==================================================
downloaded 55 KB

trying URL 'https://cloud.r-project.org/src/contrib/mlr3tuning_0.18.0.tar.gz'
Content type 'application/x-gzip' length 78334 bytes (76 KB)
==================================================
downloaded 76 KB

trying URL 'https://cloud.r-project.org/src/contrib/paradox_0.11.0.tar.gz'
Content type 'application/x-gzip' length 77843 bytes (76 KB)
==================================================
downloaded 76 KB

trying URL 'https://cloud.r-project.org/src/contrib/lgr_0.4.4.tar.gz'
Content type 'application/x-gzip' length 580349 bytes (566 KB)
==================================================
downloaded 566 KB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/SIAMCAT_2.2.0.tar.gz'
Content type 'application/x-gzip' length 19637131 bytes (18.7 MB)
==================================================
downloaded 18.7 MB

* installing *source* package ‘minqa’ ...
** package ‘minqa’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c altmov.f -o altmov.o
altmov.f:42:72:

   42 |    10 HCOL(K)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
altmov.f:45:72:

   45 |       DO 20 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
altmov.f:46:72:

   46 |    20 HCOL(K)=HCOL(K)+TEMP*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
altmov.f:53:72:

   53 |    30 GLAG(I)=BMAT(KNEW,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
altmov.f:57:72:

   57 |    40 TEMP=TEMP+XPT(K,J)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
altmov.f:59:72:

   59 |       DO 50 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 50 at (1)
altmov.f:60:72:

   60 |    50 GLAG(I)=GLAG(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
altmov.f:76:72:

   76 |    60 DISTSQ=DISTSQ+TEMP*TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
altmov.f:173:72:

  173 |    90 XNEW(I)=DMAX1(SL(I),DMIN1(SU(I),TEMP))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
altmov.f:238:72:

  238 |   140 GW=GW+GLAG(I)*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
altmov.f:249:72:

  249 |   150 TEMP=TEMP+XPT(K,J)*W(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
altmov.f:250:72:

  250 |   160 CURV=CURV+HCOL(K)*TEMP*TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
altmov.f:256:72:

  256 |   170     XALT(I)=DMAX1(SL(I),DMIN1(SU(I),TEMP))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
altmov.f:269:72:

  269 |   180     W(N+I)=XALT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
altmov.f:276:72:

  276 |   190     XALT(I)=W(N+I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 190 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c bigden.f -o bigden.o
bigden.f:45:72:

   45 |    10 W(N+K)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
bigden.f:49:72:

   49 |       DO 20 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
bigden.f:50:72:

   50 |    20 W(N+K)=W(N+K)+TEMP*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
bigden.f:67:72:

   67 |    30 XOPTSQ=XOPTSQ+XOPT(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
bigden.f:78:72:

   78 |    40         SSTEMP=SSTEMP+DIFF*DIFF
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
bigden.f:88:72:

   88 |    60     S(I)=XPT(KSAV,I)-XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
bigden.f:104:72:

  104 |    80 XOPTS=XOPTS+XOPT(I)*S(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
bigden.f:116:72:

  116 |    90 DEN(I)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
bigden.f:127:72:

  127 |   100 TEMPC=TEMPC+XPT(K,I)*XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
bigden.f:132:72:

  132 |   110 WVEC(K,5)=HALF*TEMPA*TEMPB
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
bigden.f:139:72:

  139 |   120 WVEC(IP,5)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
bigden.f:147:72:

  147 |   130 PROD(K,JC)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
bigden.f:151:72:

  151 |   140 SUM=SUM+ZMAT(K,J)*WVEC(K,JC)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
bigden.f:153:72:

  153 |       DO 150 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 150 at (1)
bigden.f:154:72:

  154 |   150 PROD(K,JC)=PROD(K,JC)+SUM*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
bigden.f:159:72:

  159 |   160     SUM=SUM+BMAT(K,J)*WVEC(NPT+J,JC)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
bigden.f:160:72:

  160 |   170     PROD(K,JC)=PROD(K,JC)+SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
bigden.f:162:72:

  162 |       DO 190 J=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 190 at (1)
bigden.f:165:72:

  165 |   180 SUM=SUM+BMAT(I,J)*WVEC(I,JC)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
bigden.f:166:72:

  166 |   190 PROD(NPT+J,JC)=SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 190 at (1)
bigden.f:174:72:

  174 |   200 SUM=SUM+PAR(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
bigden.f:193:72:

  193 |   210 DEN(9)=DEN(9)-HALF*TEMPA
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 210 at (1)
bigden.f:200:72:

  200 |   220 SUM=SUM+PAR(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 220 at (1)
bigden.f:234:72:

  234 |   230 PAR(J+1)=PAR(2)*PAR(J-1)+PAR(3)*PAR(J-2)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 230 at (1)
bigden.f:238:72:

  238 |   240 SUM=SUM+DENEX(J)*PAR(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
bigden.f:264:72:

  264 |   260 PAR(J+1)=PAR(2)*PAR(J-1)+PAR(3)*PAR(J-2)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
bigden.f:269:72:

  269 |   270 DENMAX=DENMAX+DENEX(J)*PAR(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
bigden.f:272:72:

  272 |       DO 280 J=1,5
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 280 at (1)
bigden.f:273:72:

  273 |   280 VLAG(K)=VLAG(K)+PROD(K,J)*PAR(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 280 at (1)
bigden.f:283:72:

  283 |   290 TEMPB=TEMPB+W(I)*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 290 at (1)
bigden.f:294:72:

  294 |   300 S(I)=TAU*BMAT(KNEW,I)+ALPHA*TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 300 at (1)
bigden.f:298:72:

  298 |   310 SUM=SUM+XPT(K,J)*W(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
bigden.f:300:72:

  300 |       DO 320 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 320 at (1)
bigden.f:301:72:

  301 |   320 S(I)=S(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 320 at (1)
bigden.f:306:72:

  306 |   330 DS=DS+D(I)*S(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 330 at (1)
bigden.f:314:72:

  314 |       DO 350 J=1,5
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 350 at (1)
bigden.f:315:72:

  315 |   350 W(K)=W(K)+WVEC(K,J)*PAR(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 350 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c biglag.f -o biglag.o
biglag.f:38:72:

   38 |    10 HCOL(K)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
biglag.f:42:72:

   42 |       DO 20 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
biglag.f:43:72:

   43 |    20 HCOL(K)=HCOL(K)+TEMP*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
biglag.f:54:72:

   54 |    30 DD=DD+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
biglag.f:60:72:

   60 |    40 SUM=SUM+XPT(K,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
biglag.f:63:72:

   63 |       DO 50 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 50 at (1)
biglag.f:65:72:

   65 |    50 GD(I)=GD(I)+SUM*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
biglag.f:76:72:

   76 |    60 DHD=DHD+D(I)*GD(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
biglag.f:86:72:

   86 |    70 S(I)=GC(I)+TEMP*GD(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 70 at (1)
biglag.f:99:72:

   99 |    90 SS=SS+S(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
biglag.f:105:72:

  105 |   100 W(I)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
biglag.f:113:72:

  113 |   110 SUM=SUM+XPT(K,J)*S(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
biglag.f:115:72:

  115 |       DO 120 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 120 at (1)
biglag.f:116:72:

  116 |   120 W(I)=W(I)+SUM*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
biglag.f:127:72:

  127 |   130 CF5=CF5+S(I)*GD(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
biglag.f:151:72:

  151 |   140 TAUOLD=TAU
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
biglag.f:170:72:

  170 |   150 S(I)=GC(I)+GD(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c bobyqa.f -o bobyqa.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c bobyqb.f -o bobyqb.o
bobyqb.f:68:72:

   68 |    10 XOPTSQ=XOPTSQ+XOPT(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
bobyqb.f:97:72:

   97 |           DO 30 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 30 at (1)
bobyqb.f:100:72:

  100 |    30     GOPT(I)=GOPT(I)+HQ(IH)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
bobyqb.f:105:72:

  105 |    40         TEMP=TEMP+XPT(K,J)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
bobyqb.f:107:72:

  107 |               DO 50 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 50 at (1)
bobyqb.f:108:72:

  108 |    50         GOPT(I)=GOPT(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
bobyqb.f:145:72:

  145 |    70         CURV=CURV+PQ(K)*XPT(K,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 70 at (1)
bobyqb.f:167:72:

  167 |   100     SUM=SUM+XPT(K,I)*XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
bobyqb.f:170:72:

  170 |           DO 110 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 110 at (1)
bobyqb.f:174:72:

  174 |           DO 110 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 110 at (1)
bobyqb.f:175:72:

  175 |   110     BMAT(IP,J)=BMAT(IP,J)+W(I)*VLAG(J)+VLAG(I)*W(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
bobyqb.f:185:72:

  185 |   120     SUMW=SUMW+VLAG(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
bobyqb.f:189:72:

  189 |   130     SUM=SUM+VLAG(K)*XPT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
bobyqb.f:191:72:

  191 |           DO 140 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 140 at (1)
bobyqb.f:192:72:

  192 |   140     BMAT(K,J)=BMAT(K,J)+SUM*ZMAT(K,JJ)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
bobyqb.f:193:72:

  193 |           DO 150 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 150 at (1)
bobyqb.f:196:72:

  196 |           DO 150 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 150 at (1)
bobyqb.f:197:72:

  197 |   150     BMAT(IP,J)=BMAT(IP,J)+TEMP*W(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
bobyqb.f:207:72:

  207 |   160     XPT(K,J)=XPT(K,J)-XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
bobyqb.f:208:72:

  208 |           DO 170 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 170 at (1)
bobyqb.f:211:72:

  211 |   170     BMAT(NPT+I,J)=BMAT(NPT+J,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
bobyqb.f:217:72:

  217 |   180     XOPT(I)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
bobyqb.f:246:72:

  246 |   200     XOPTSQ=XOPTSQ+XOPT(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
bobyqb.f:278:72:

  278 |   220 D(I)=XNEW(I)-XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 220 at (1)
bobyqb.f:291:72:

  291 |   240 SUM=SUM+BMAT(K,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
bobyqb.f:294:72:

  294 |   250 W(NPT+K)=SUMA
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 250 at (1)
bobyqb.f:299:72:

  299 |   260 SUM=SUM+ZMAT(K,JJ)*W(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
bobyqb.f:301:72:

  301 |       DO 270 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 270 at (1)
bobyqb.f:302:72:

  302 |   270 VLAG(K)=VLAG(K)+SUM*ZMAT(K,JJ)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
bobyqb.f:310:72:

  310 |   280 SUM=SUM+W(K)*BMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 280 at (1)
bobyqb.f:314:72:

  314 |   290 SUM=SUM+BMAT(JP,I)*D(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 290 at (1)
bobyqb.f:317:72:

  317 |   300 DX=DX+D(J)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 300 at (1)
bobyqb.f:330:72:

  330 |   310         D(I)=XNEW(I)-XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
bobyqb.f:361:72:

  361 |   330     HDIAG=HDIAG+ZMAT(K,JJ)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 330 at (1)
bobyqb.f:365:72:

  365 |   340     DISTSQ=DISTSQ+(XPT(K,J)-XOPT(J))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 340 at (1)
bobyqb.f:428:72:

  428 |       DO 410 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 410 at (1)
bobyqb.f:432:72:

  432 |   410 VQUAD=VQUAD+HQ(IH)*TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 410 at (1)
bobyqb.f:434:72:

  434 |   420 VQUAD=VQUAD+HALF*PQ(K)*W(NPT+K)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 420 at (1)
bobyqb.f:476:72:

  476 |   440         HDIAG=HDIAG+ZMAT(K,JJ)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 440 at (1)
bobyqb.f:480:72:

  480 |   450         DISTSQ=DISTSQ+(XPT(K,J)-XNEW(J))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 450 at (1)
bobyqb.f:487:72:

  487 |   460         BIGLSQ=DMAX1(BIGLSQ,TEMP*VLAG(K)**2)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 460 at (1)
bobyqb.f:504:72:

  504 |       DO 470 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 470 at (1)
bobyqb.f:506:72:

  506 |   470 HQ(IH)=HQ(IH)+TEMP*XPT(KNEW,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 470 at (1)
bobyqb.f:509:72:

  509 |       DO 480 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 480 at (1)
bobyqb.f:510:72:

  510 |   480 PQ(K)=PQ(K)+TEMP*ZMAT(K,JJ)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 480 at (1)
bobyqb.f:518:72:

  518 |   490 W(I)=BMAT(KNEW,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 490 at (1)
bobyqb.f:522:72:

  522 |   500 SUMA=SUMA+ZMAT(KNEW,JJ)*ZMAT(K,JJ)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 500 at (1)
bobyqb.f:525:72:

  525 |   510 SUMB=SUMB+XPT(K,J)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 510 at (1)
bobyqb.f:527:72:

  527 |       DO 520 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 520 at (1)
bobyqb.f:528:72:

  528 |   520 W(I)=W(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 520 at (1)
bobyqb.f:530:72:

  530 |   530 GOPT(I)=GOPT(I)+DIFF*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 530 at (1)
bobyqb.f:541:72:

  541 |           DO 540 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 540 at (1)
bobyqb.f:544:72:

  544 |   540     GOPT(I)=GOPT(I)+HQ(IH)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 540 at (1)
bobyqb.f:548:72:

  548 |   550     TEMP=TEMP+XPT(K,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 550 at (1)
bobyqb.f:550:72:

  550 |           DO 560 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 560 at (1)
bobyqb.f:551:72:

  551 |   560     GOPT(I)=GOPT(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 560 at (1)
bobyqb.f:561:72:

  561 |   570     W(K)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 570 at (1)
bobyqb.f:565:72:

  565 |   580     SUM=SUM+ZMAT(K,J)*VLAG(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 580 at (1)
bobyqb.f:566:72:

  566 |           DO 590 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 590 at (1)
bobyqb.f:567:72:

  567 |   590     W(K)=W(K)+SUM*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 590 at (1)
bobyqb.f:571:72:

  571 |   600     SUM=SUM+XPT(K,J)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 600 at (1)
bobyqb.f:573:72:

  573 |   610     W(K)=SUM*W(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 610 at (1)
bobyqb.f:579:72:

  579 |   620     SUM=SUM+BMAT(K,I)*VLAG(K)+XPT(K,I)*W(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 620 at (1)
bobyqb.f:590:72:

  590 |   630     VLAG(NPT+I)=SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 630 at (1)
bobyqb.f:622:72:

  622 |   660 SUM=SUM+(XPT(K,J)-XOPT(J))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 660 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c lagmax.f -o lagmax.o
lagmax.f:36:72:

   36 |    10 SUM=SUM+H(I,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
lagmax.f:43:72:

   43 |    30 V(J)=H(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
lagmax.f:56:72:

   56 |    40 D(I)=D(I)+H(I,J)*V(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
lagmax.f:58:72:

   58 |    50 DSQ=DSQ+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
lagmax.f:64:72:

   64 |    60     WSQ=WSQ+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
lagmax.f:70:72:

   70 |    70     TEMP=TEMP+H(I,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 70 at (1)
lagmax.f:72:72:

   72 |    80     V(I)=RATIO*V(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
lagmax.f:78:72:

   78 |    90     D(I)=VHW*V(I)+TEMP*D(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
lagmax.f:94:72:

   94 |   100 SUM=SUM+H(I,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
lagmax.f:95:72:

   95 |   110 DHD=DHD+SUM*D(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
lagmax.f:102:72:

  102 |   120 D(I)=SCALE*D(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
lagmax.f:122:72:

  122 |   130 SUMV=SUMV+H(I,J)*V(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
lagmax.f:125:72:

  125 |   140 VHV=VHV+SUMV*V(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
lagmax.f:147:72:

  147 |   150 V(I)=TEMPC*V(I)-TEMPD*G(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
lagmax.f:168:72:

  168 |   160 D(I)=TEMPD*D(I)+TEMPV*V(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c minqa.cpp -o minqa.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c newuoa.f -o newuoa.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c newuob.f -o newuob.o
newuob.f:49:72:

   49 |    10 XPT(K,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
newuob.f:50:72:

   50 |       DO 20 I=1,NDIM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
newuob.f:51:72:

   51 |    20 BMAT(I,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
newuob.f:53:72:

   53 |    30 HQ(IH)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
newuob.f:56:72:

   56 |       DO 40 J=1,NPTM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 40 at (1)
newuob.f:57:72:

   57 |    40 ZMAT(K,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
newuob.f:98:72:

   98 |    60 X(J)=XPT(NF,J)+XBASE(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
newuob.f:159:72:

  159 |    80 XOPTSQ=XOPTSQ+XOPT(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
newuob.f:170:72:

  170 |   110 DSQ=DSQ+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
newuob.f:191:72:

  191 |   130     SUM=SUM+XPT(K,I)*XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
newuob.f:195:72:

  195 |           DO 140 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 140 at (1)
newuob.f:201:72:

  201 |           DO 140 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 140 at (1)
newuob.f:202:72:

  202 |   140     BMAT(IP,J)=BMAT(IP,J)+VLAG(I)*W(J)+W(I)*VLAG(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
newuob.f:210:72:

  210 |   150     W(I)=W(NPT+I)*ZMAT(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
newuob.f:214:72:

  214 |   160     SUM=SUM+W(I)*XPT(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
newuob.f:217:72:

  217 |           DO 170 I=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 170 at (1)
newuob.f:218:72:

  218 |   170     BMAT(I,J)=BMAT(I,J)+SUM*ZMAT(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
newuob.f:219:72:

  219 |           DO 180 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 180 at (1)
newuob.f:223:72:

  223 |           DO 180 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 180 at (1)
newuob.f:224:72:

  224 |   180     BMAT(IP,J)=BMAT(IP,J)+TEMP*VLAG(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
newuob.f:234:72:

  234 |   190     XPT(K,J)=XPT(K,J)-HALF*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 190 at (1)
newuob.f:235:72:

  235 |           DO 200 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 200 at (1)
newuob.f:240:72:

  240 |   200     BMAT(NPT+I,J)=BMAT(NPT+J,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
newuob.f:243:72:

  243 |   210     XOPT(J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 210 at (1)
newuob.f:266:72:

  266 |   220 SUM=SUM+BMAT(K,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 220 at (1)
newuob.f:268:72:

  268 |   230 VLAG(K)=SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 230 at (1)
newuob.f:273:72:

  273 |   240 SUM=SUM+ZMAT(I,K)*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
newuob.f:280:72:

  280 |       DO 250 I=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 250 at (1)
newuob.f:281:72:

  281 |   250 VLAG(I)=VLAG(I)+SUM*ZMAT(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 250 at (1)
newuob.f:287:72:

  287 |   260 SUM=SUM+W(I)*BMAT(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
newuob.f:291:72:

  291 |   270 SUM=SUM+BMAT(JP,K)*D(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
newuob.f:294:72:

  294 |   280 DX=DX+D(J)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 280 at (1)
newuob.f:314:72:

  314 |   300 X(I)=XBASE(I)+XNEW(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 300 at (1)
newuob.f:343:72:

  343 |       DO 340 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 340 at (1)
newuob.f:347:72:

  347 |   340 VQUAD=VQUAD+TEMP*HQ(IH)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 340 at (1)
newuob.f:349:72:

  349 |   350 VQUAD=VQUAD+PQ(K)*W(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 350 at (1)
newuob.f:366:72:

  366 |   360     XOPTSQ=XOPTSQ+XOPT(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 360 at (1)
newuob.f:405:72:

  405 |   380 HDIAG=HDIAG+TEMP*ZMAT(K,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 380 at (1)
newuob.f:409:72:

  409 |   390 DISTSQ=DISTSQ+(XPT(K,J)-XOPT(J))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 390 at (1)
newuob.f:427:72:

  427 |       DO 420 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 420 at (1)
newuob.f:429:72:

  429 |   420 HQ(IH)=HQ(IH)+TEMP*XPT(KNEW,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 420 at (1)
newuob.f:438:72:

  438 |       DO 440 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 440 at (1)
newuob.f:439:72:

  439 |   440 PQ(K)=PQ(K)+TEMP*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 440 at (1)
newuob.f:444:72:

  444 |   450 XPT(KNEW,I)=XNEW(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 450 at (1)
newuob.f:455:72:

  455 |   700         VLAG(K)=FVAL(K)-FVAL(KOPT)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 700 at (1)
newuob.f:460:72:

  460 |   710         SUM=SUM+BMAT(K,I)*VLAG(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 710 at (1)
newuob.f:462:72:

  462 |   720         W(I)=SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 720 at (1)
newuob.f:471:72:

  471 |   730             GQ(I)=W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 730 at (1)
newuob.f:473:72:

  473 |   740             HQ(IH)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 740 at (1)
newuob.f:477:72:

  477 |   750             W(J)=W(J)+VLAG(K)*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 750 at (1)
newuob.f:478:72:

  478 |   760             IF (J .LT. IDZ) W(J)=-W(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 760 at (1)
newuob.f:481:72:

  481 |                   DO 770 J=1,NPTM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 770 at (1)
newuob.f:482:72:

  482 |   770             PQ(K)=PQ(K)+ZMAT(K,J)*W(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 770 at (1)
newuob.f:504:72:

  504 |   470 SUM=SUM+(XPT(K,J)-XOPT(J))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 470 at (1)
newuob.f:556:72:

  556 |   540     X(I)=XBASE(I)+XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 540 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c prelim.f -o prelim.o
prelim.f:39:72:

   39 |    10 XPT(K,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
prelim.f:40:72:

   40 |       DO 20 I=1,NDIM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
prelim.f:41:72:

   41 |    20 BMAT(I,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
prelim.f:43:72:

   43 |    30 HQ(IH)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
prelim.f:46:72:

   46 |       DO 40 J=1,NPT-NP
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 40 at (1)
prelim.f:47:72:

   47 |    40 ZMAT(K,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rescue.f -o rescue.o
rescue.f:66:72:

   66 |    10 DISTSQ=DISTSQ+XPT(K,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
rescue.f:70:72:

   70 |       DO 20 J=1,NPTM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
rescue.f:71:72:

   71 |    20 ZMAT(K,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
rescue.f:80:72:

   80 |    30 W(J)=W(J)+PQ(K)*XPT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
rescue.f:81:72:

   81 |       DO 40 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 40 at (1)
rescue.f:83:72:

   83 |    40 HQ(IH)=HQ(IH)+W(I)*XOPT(J)+W(J)*XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
rescue.f:103:72:

  103 |       DO 50 I=1,NDIM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 50 at (1)
rescue.f:104:72:

  104 |    50 BMAT(I,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
rescue.f:145:72:

  145 |    70     ZMAT(K,K-NP)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 70 at (1)
rescue.f:157:72:

  157 |    90 BMAT(KNEW,J)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
rescue.f:161:72:

  161 |   100 ZMAT(KNEW,J)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
rescue.f:180:72:

  180 |  110         W(NDIM+K)=DABS(W(NDIM+K))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
rescue.f:201:72:

  201 |   140 W(NPT+J)=XPT(KNEW,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
rescue.f:208:72:

  208 |   150     SUM=SUM+W(NPT+J)*XPT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
rescue.f:219:72:

  219 |   160 W(K)=HALF*SUM*SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
rescue.f:227:72:

  227 |   170 SUM=SUM+BMAT(K,J)*W(NPT+J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
rescue.f:228:72:

  228 |   180 VLAG(K)=SUM
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
rescue.f:233:72:

  233 |   190 SUM=SUM+ZMAT(K,J)*W(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 190 at (1)
rescue.f:235:72:

  235 |       DO 200 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 200 at (1)
rescue.f:236:72:

  236 |   200 VLAG(K)=VLAG(K)+SUM*ZMAT(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
rescue.f:242:72:

  242 |   210 SUM=SUM+BMAT(K,J)*W(K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 210 at (1)
rescue.f:246:72:

  246 |   220 SUM=SUM+BMAT(IP,J)*W(IP)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 220 at (1)
rescue.f:249:72:

  249 |   230 DISTSQ=DISTSQ+XPT(KNEW,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 230 at (1)
rescue.f:264:72:

  264 |   240     HDIAG=HDIAG+ZMAT(K,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
rescue.f:271:72:

  271 |   250 VLMXSQ=DMAX1(VLMXSQ,VLAG(K)**2)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 250 at (1)
rescue.f:297:72:

  297 |       DO 270 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 270 at (1)
rescue.f:299:72:

  299 |   270 HQ(IH)=HQ(IH)+TEMP*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
rescue.f:332:72:

  332 |   280 VQUAD=VQUAD+HALF*PQ(K)*TEMP*TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 280 at (1)
rescue.f:359:72:

  359 |   310 GOPT(I)=GOPT(I)+DIFF*BMAT(KPT,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
rescue.f:363:72:

  363 |   320 SUM=SUM+ZMAT(K,J)*ZMAT(KPT,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 320 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c trsapp.f -o trsapp.o
trsapp.f:33:72:

   33 |    10 D(I)=XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
trsapp.f:45:72:

   45 |    30 DD=DD+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
trsapp.f:61:72:

   61 |    60 DHD=DHD+D(J)*HD(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
trsapp.f:82:72:

   82 |    70 GG=GG+(G(I)+HS(I))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 70 at (1)
trsapp.f:98:72:

   98 |    80     SS=SS+STEP(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
trsapp.f:112:72:

  112 |   100 SHS=SHS+STEP(I)*HS(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
trsapp.f:125:72:

  125 |   110 D(I)=TEMPA*(G(I)+HS(I))-TEMPB*STEP(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
trsapp.f:133:72:

  133 |   130 DHS=DHS+HD(I)*STEP(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
trsapp.f:156:72:

  156 |   140 QSAV=QNEW
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 140 at (1)
trsapp.f:176:72:

  176 |   150 GG=GG+(G(I)+HS(I))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
trsapp.f:188:72:

  188 |   180 HD(I)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
trsapp.f:192:72:

  192 |   190 TEMP=TEMP+XPT(K,J)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 190 at (1)
trsapp.f:194:72:

  194 |       DO 200 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 200 at (1)
trsapp.f:195:72:

  195 |   200 HD(I)=HD(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
trsapp.f:198:72:

  198 |       DO 210 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 210 at (1)
trsapp.f:201:72:

  201 |   210 HD(I)=HD(I)+HQ(IH)*D(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 210 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c trsbox.f -o trsbox.o
trsbox.f:71:72:

   71 |    10 GNEW(I)=GOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
trsbox.f:92:72:

   92 |    40 STEPSQ=STEPSQ+S(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
trsbox.f:163:72:

  163 |    80     D(I)=D(I)+STPLEN*S(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
trsbox.f:304:72:

  304 |   170 REDSAV=REDNEW
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
trsbox.f:333:72:

  333 |   180 HRED(I)=CTH*HRED(I)+STH*HS(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
trsbox.f:351:72:

  351 |   200 DSQ=DSQ+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
trsbox.f:362:72:

  362 |       DO 220 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 220 at (1)
trsbox.f:365:72:

  365 |   220 HS(I)=HS(I)+HQ(IH)*S(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 220 at (1)
trsbox.f:370:72:

  370 |   230     TEMP=TEMP+XPT(K,J)*S(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 230 at (1)
trsbox.f:373:72:

  373 |   240     HS(I)=HS(I)+TEMP*XPT(K,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
trsbox.f:379:72:

  379 |   260 HRED(I)=HS(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c trstep.f -o trstep.o
trstep.f:41:72:

   41 |       DO 10 J=1,I
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 10 at (1)
trstep.f:42:72:

   42 |    10 H(I,J)=H(J,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
trstep.f:55:72:

   55 |    20     SUM=SUM+H(I,K)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
trstep.f:68:72:

   68 |    30     Z(I)=TD(I)*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
trstep.f:74:72:

   74 |    40     Z(J)=Z(J)+H(I,J)*W(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
trstep.f:75:72:

   75 |    50     WZ=WZ+W(J)*Z(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
trstep.f:82:72:

   82 |    60         H(I,J)=H(I,J)-W(I)*Z(J)-W(J)*(Z(I)-WZ*W(I))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
trstep.f:93:72:

   93 |    90 GSQ=GSQ+G(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
trstep.f:99:72:

   99 |   100 SUM=SUM+GG(I)*H(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 100 at (1)
trstep.f:100:72:

  100 |       DO 110 I=KP,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 110 at (1)
trstep.f:101:72:

  101 |   110 GG(I)=GG(I)-SUM*H(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
trstep.f:112:72:

  112 |   120 TDMIN=DMIN1(TDMIN,TD(I))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
trstep.f:117:72:

  117 |   130     D(I)=-SCALE*GG(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
trstep.f:187:72:

  187 |   180     D(I)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
trstep.f:200:72:

  200 |   200     DTG=DTG+D(I)*GG(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
trstep.f:203:72:

  203 |   210     D(I)=SCALE*D(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 210 at (1)
trstep.f:222:72:

  222 |   240 W(I)=(-GG(I)-TN(I-1)*W(I-1))/PIV(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
trstep.f:225:72:

  225 |   250 D(I)=W(I)-TN(I)*D(I+1)/PIV(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 250 at (1)
trstep.f:233:72:

  233 |   260 WSQ=WSQ+PIV(I)*W(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
trstep.f:244:72:

  244 |   270     D(I)=SCALE*D(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
trstep.f:276:72:

  276 |   280     W(I)=(DSIGN(ONE,TEMP)+TEMP)/PIV(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 280 at (1)
trstep.f:279:72:

  279 |   290     Z(I)=W(I)-TN(I)*Z(I+1)/PIV(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 290 at (1)
trstep.f:286:72:

  286 |   300     DTZ=DTZ+D(I)*Z(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 300 at (1)
trstep.f:296:72:

  296 |   310         D(I)=D(I)+GAM*Z(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
trstep.f:327:72:

  327 |   330 SHFMAX=DMIN1(SHFMAX,PIVOT)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 330 at (1)
trstep.f:371:72:

  371 |   380 SUM=SUM+D(I)*H(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 380 at (1)
trstep.f:372:72:

  372 |       DO 390 I=KP,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 390 at (1)
trstep.f:373:72:

  373 |   390 D(I)=D(I)-SUM*H(I,K)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 390 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c uobyqa.f -o uobyqa.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c uobyqb.f -o uobyqb.o
uobyqb.f:49:72:

   49 |       DO 10 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 10 at (1)
uobyqb.f:50:72:

   50 |    10 XPT(K,I)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
uobyqb.f:52:72:

   52 |       DO 20 J=1,NPTM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 20 at (1)
uobyqb.f:53:72:

   53 |    20 PL(K,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
uobyqb.f:61:72:

   61 |    40 X(I)=XBASE(I)+XPT(NF+1,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
uobyqb.f:173:72:

  173 |       DO 80 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 80 at (1)
uobyqb.f:177:72:

  177 |    80 H(I,J)=PQ(IH)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
uobyqb.f:187:72:

  187 |    90 TEMP=TEMP+D(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
uobyqb.f:201:72:

  201 |  110     X(I)=XBASE(I)+XNEW(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
uobyqb.f:230:72:

  230 |       DO 150 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 150 at (1)
uobyqb.f:234:72:

  234 |   150 VQUAD=VQUAD+W(IH)*PQ(IH)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
uobyqb.f:238:72:

  238 |   160 TEMP=TEMP+W(J)*PL(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 160 at (1)
uobyqb.f:239:72:

  239 |   170 VLAG(K)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 170 at (1)
uobyqb.f:250:72:

  250 |   180 TEMP=TEMP+(XPT(K,I)-XNEW(I))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
uobyqb.f:252:72:

  252 |   190 SUM=SUM+DABS(TEMP*TEMP*TEMP*VLAG(K))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 190 at (1)
uobyqb.f:262:72:

  262 |   200     XOPT(I)=XNEW(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 200 at (1)
uobyqb.f:298:72:

  298 |   220 SUM=SUM+(XPT(K,I)-XOPT(I))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 220 at (1)
uobyqb.f:313:72:

  313 |   250 XPT(KNEW,I)=XNEW(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 250 at (1)
uobyqb.f:317:72:

  317 |   260 PQ(J)=PQ(J)+DIFF*PL(KNEW,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
uobyqb.f:322:72:

  322 |   270     PL(K,J)=PL(K,J)-TEMP*PL(KNEW,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
uobyqb.f:343:72:

  343 |       DO 300 I=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 300 at (1)
uobyqb.f:344:72:

  344 |   300 W(K)=W(K)+(XPT(K,I)-XOPT(I))**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 300 at (1)
uobyqb.f:371:72:

  371 |   330     H(I,J)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 330 at (1)
uobyqb.f:372:72:

  372 |   340     SUMH=SUMH+HALF*TEMP*TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 340 at (1)
uobyqb.f:382:72:

  382 |   350         SUMG=SUMG+G(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 350 at (1)
uobyqb.f:409:72:

  409 |   360     XPT(K,J)=XPT(K,J)-XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 360 at (1)
uobyqb.f:410:72:

  410 |           DO 380 I=1,J
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 380 at (1)
uobyqb.f:416:72:

  416 |   370         PL(K,J)=PL(K,J)+PL(K,IH)*XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 370 at (1)
uobyqb.f:418:72:

  418 |           DO 380 K=1,NPT
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 380 at (1)
uobyqb.f:419:72:

  419 |   380     PL(K,I)=PL(K,I)+PL(K,IH)*XOPT(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 380 at (1)
uobyqb.f:453:72:

  453 |   430     X(I)=XBASE(I)+XOPT(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 430 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c update.f -o update.o
update.f:30:72:

   30 |    10     ZMAT(I,JL)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
update.f:61:72:

   61 |    40     ZMAT(I,1)=TEMPA*ZMAT(I,1)-TEMPB*VLAG(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
update.f:79:72:

   79 |    50     ZMAT(I,JB)=SCALB*(ZMAT(I,JB)-TEMPA*W(I)-TEMPB*VLAG(I))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
update.f:94:72:

   94 |    60     ZMAT(I,IDZ)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
update.f:104:72:

  104 |       DO 70 I=1,JP
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 70 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c updatebobyqa.f -o updatebobyqa.o
updatebobyqa.f:22:72:

   22 |       DO 10 J=1,NPTM
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 10 at (1)
updatebobyqa.f:23:72:

   23 |    10 ZTEST=DMAX1(ZTEST,DABS(ZMAT(K,J)))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
updatebobyqa.f:37:72:

   37 |    20     ZMAT(I,1)=TEMP
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
updatebobyqa.f:58:72:

   58 |    50 ZMAT(I,1)=TEMPA*ZMAT(I,1)-TEMPB*VLAG(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
updatebobyqa.f:67:72:

   67 |       DO 60 I=1,JP
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 60 at (1)
g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o minqa.so altmov.o bigden.o biglag.o bobyqa.o bobyqb.o lagmax.o minqa.o newuoa.o newuob.o prelim.o rescue.o trsapp.o trsbox.o trstep.o uobyqa.o uobyqb.o update.o updatebobyqa.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-minqa/00new/minqa/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘minqa’ as ‘minqa_1.2.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (minqa)
* installing *source* package ‘nloptr’ ...
** package ‘nloptr’ successfully unpacked and MD5 sums checked
** using staged installation
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C++... yes
checking whether g++ -std=gnu++14 accepts -g... yes
checking for g++ -std=gnu++14 option to enable C++11 features... none needed
checking how to run the C++ preprocessor... g++ -std=gnu++14 -E
checking whether the compiler supports GNU C++... (cached) yes
checking whether g++ -std=gnu++14 accepts -g... (cached) yes
checking for g++ -std=gnu++14 option to enable C++11 features... (cached) none needed
checking for pkg-config... /usr/bin/pkg-config
checking if pkg-config knows NLopt... no
checking for cmake... /opt/conda/bin/cmake
using NLopt via local cmake build on x86_64 
set CMAKE_BIN=/opt/conda/bin/cmake
set CC=gcc
set CFLAGS= -fpic -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2
set CXX=g++
set CXXFLAGS=-std=gnu++11 -fpic -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2
set LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro
-- The C compiler identification is GNU 9.4.0
-- The CXX compiler identification is GNU 9.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/gcc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/g++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- NLopt version 2.7.1
-- Looking for getopt.h
-- Looking for getopt.h - found
-- Looking for unistd.h
-- Looking for unistd.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for time.h
-- Looking for time.h - found
-- Looking for sys/time.h
-- Looking for sys/time.h - found
-- Looking for getpid
-- Looking for getpid - found
-- Looking for syscall
-- Looking for syscall - found
-- Looking for isinf
-- Looking for isinf - found
-- Looking for isnan
-- Looking for isnan - found
-- Looking for gettimeofday
-- Looking for gettimeofday - found
-- Looking for qsort_r
-- Looking for qsort_r - found
-- Looking for time
-- Looking for time - found
-- Looking for copysign
-- Looking for copysign - found
-- Looking for getopt
-- Looking for getopt - found
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of uint32_t
-- Check size of uint32_t - done
-- Check size of unsigned int
-- Check size of unsigned int - done
-- Check size of unsigned long
-- Check size of unsigned long - done
-- Looking for sqrt in m
-- Looking for sqrt in m - found
-- Looking for fpclassify
-- Looking for fpclassify - TRUE
-- Performing Test HAVE_THREAD_LOCAL_STORAGE
-- Performing Test HAVE_THREAD_LOCAL_STORAGE - Success
-- Performing Test HAVE_THREAD_LOCAL_STORAGE
-- Performing Test HAVE_THREAD_LOCAL_STORAGE - Failed
-- Looking for __cplusplus
-- Looking for __cplusplus - found
-- Performing Test SUPPORTS_STDCXX11
-- Performing Test SUPPORTS_STDCXX11 - Success
-- Performing Test HAS_FPIC
-- Performing Test HAS_FPIC - Success
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt-build
[  1%] Generating nlopt.hpp
[  3%] Generating nlopt.f
[  3%] Built target generate-fortran
[  3%] Built target generate-cpp
[  5%] Building C object CMakeFiles/nlopt.dir/src/algs/direct/DIRect.c.o
[  7%] Building C object CMakeFiles/nlopt.dir/src/algs/direct/direct_wrap.c.o
[  9%] Building C object CMakeFiles/nlopt.dir/src/algs/direct/DIRserial.c.o
[ 11%] Building C object CMakeFiles/nlopt.dir/src/algs/direct/DIRsubrout.c.o
[ 13%] Building C object CMakeFiles/nlopt.dir/src/algs/cdirect/cdirect.c.o
[ 15%] Building C object CMakeFiles/nlopt.dir/src/algs/cdirect/hybrid.c.o
[ 17%] Building C object CMakeFiles/nlopt.dir/src/algs/praxis/praxis.c.o
[ 19%] Building C object CMakeFiles/nlopt.dir/src/algs/luksan/plis.c.o
[ 21%] Building C object CMakeFiles/nlopt.dir/src/algs/luksan/plip.c.o
[ 23%] Building C object CMakeFiles/nlopt.dir/src/algs/luksan/pnet.c.o
[ 25%] Building C object CMakeFiles/nlopt.dir/src/algs/luksan/mssubs.c.o
[ 27%] Building C object CMakeFiles/nlopt.dir/src/algs/luksan/pssubs.c.o
[ 29%] Building C object CMakeFiles/nlopt.dir/src/algs/crs/crs.c.o
[ 31%] Building C object CMakeFiles/nlopt.dir/src/algs/mlsl/mlsl.c.o
[ 33%] Building C object CMakeFiles/nlopt.dir/src/algs/mma/mma.c.o
[ 35%] Building C object CMakeFiles/nlopt.dir/src/algs/mma/ccsa_quadratic.c.o
[ 37%] Building C object CMakeFiles/nlopt.dir/src/algs/cobyla/cobyla.c.o
[ 39%] Building C object CMakeFiles/nlopt.dir/src/algs/newuoa/newuoa.c.o
[ 41%] Building C object CMakeFiles/nlopt.dir/src/algs/neldermead/nldrmd.c.o
[ 43%] Building C object CMakeFiles/nlopt.dir/src/algs/neldermead/sbplx.c.o
[ 45%] Building C object CMakeFiles/nlopt.dir/src/algs/auglag/auglag.c.o
[ 47%] Building C object CMakeFiles/nlopt.dir/src/algs/bobyqa/bobyqa.c.o
[ 49%] Building C object CMakeFiles/nlopt.dir/src/algs/isres/isres.c.o
[ 50%] Building C object CMakeFiles/nlopt.dir/src/algs/slsqp/slsqp.c.o
[ 52%] Building C object CMakeFiles/nlopt.dir/src/algs/esch/esch.c.o
[ 54%] Building C object CMakeFiles/nlopt.dir/src/api/general.c.o
[ 56%] Building C object CMakeFiles/nlopt.dir/src/api/options.c.o
[ 58%] Building C object CMakeFiles/nlopt.dir/src/api/optimize.c.o
[ 60%] Building C object CMakeFiles/nlopt.dir/src/api/deprecated.c.o
[ 62%] Building C object CMakeFiles/nlopt.dir/src/api/f77api.c.o
[ 64%] Building C object CMakeFiles/nlopt.dir/src/util/mt19937ar.c.o
[ 66%] Building C object CMakeFiles/nlopt.dir/src/util/sobolseq.c.o
[ 68%] Building C object CMakeFiles/nlopt.dir/src/util/timer.c.o
[ 70%] Building C object CMakeFiles/nlopt.dir/src/util/stop.c.o
[ 72%] Building C object CMakeFiles/nlopt.dir/src/util/redblack.c.o
[ 74%] Building C object CMakeFiles/nlopt.dir/src/util/qsort_r.c.o
[ 76%] Building C object CMakeFiles/nlopt.dir/src/util/rescale.c.o
[ 78%] Building CXX object CMakeFiles/nlopt.dir/src/algs/stogo/global.cc.o
[ 80%] Building CXX object CMakeFiles/nlopt.dir/src/algs/stogo/linalg.cc.o
[ 82%] Building CXX object CMakeFiles/nlopt.dir/src/algs/stogo/local.cc.o
[ 84%] Building CXX object CMakeFiles/nlopt.dir/src/algs/stogo/stogo.cc.o
[ 86%] Building CXX object CMakeFiles/nlopt.dir/src/algs/stogo/tools.cc.o
[ 88%] Building CXX object CMakeFiles/nlopt.dir/src/algs/ags/evolvent.cc.o
[ 90%] Building CXX object CMakeFiles/nlopt.dir/src/algs/ags/solver.cc.o
[ 92%] Building CXX object CMakeFiles/nlopt.dir/src/algs/ags/local_optimizer.cc.o
[ 94%] Building CXX object CMakeFiles/nlopt.dir/src/algs/ags/ags.cc.o
[ 96%] Linking CXX static library libnlopt.a
[100%] Built target nlopt
[  1%] Built target generate-cpp
[  3%] Built target generate-fortran
Consolidate compiler generated dependencies of target nlopt
[100%] Built target nlopt
Install the project...
-- Install configuration: "Release"
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/lib/pkgconfig/nlopt.pc
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/include/nlopt.h
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/include/nlopt.hpp
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/include/nlopt.f
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/lib/libnlopt.a
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/lib/cmake/nlopt/NLoptLibraryDepends.cmake
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/lib/cmake/nlopt/NLoptLibraryDepends-release.cmake
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/lib/cmake/nlopt/NLoptConfig.cmake
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/lib/cmake/nlopt/NLoptConfigVersion.cmake
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/share/man/man3/nlopt.3
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/share/man/man3/nlopt_minimize.3
-- Installing: /tmp/Rtmp1k4KWo/R.INSTALL1264fbf4fb5/nloptr/src/nlopt/share/man/man3/nlopt_minimize_constrained.3
mv: cannot move 'nlopt/lib' to a subdirectory of itself, 'nlopt/lib/lib'
configure: creating ./config.status
config.status: creating src/Makevars
** libs
gcc -I"/usr/share/R/include" -DNDEBUG -I../inst/include  -I'/usr/local/lib/R/site-library/testthat/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init_nloptr.c -o init_nloptr.o
gcc -I"/usr/share/R/include" -DNDEBUG -I../inst/include  -I'/usr/local/lib/R/site-library/testthat/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c nloptr.c -o nloptr.o
g++ -std=gnu++11 -I"/usr/share/R/include" -DNDEBUG -I../inst/include  -I'/usr/local/lib/R/site-library/testthat/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c test-C-API.cpp -o test-C-API.o
g++ -std=gnu++11 -I"/usr/share/R/include" -DNDEBUG -I../inst/include  -I'/usr/local/lib/R/site-library/testthat/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c test-runner.cpp -o test-runner.o
g++ -std=gnu++11 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o nloptr.so init_nloptr.o nloptr.o test-C-API.o test-runner.o -llapack -lblas -lgfortran -lm -lquadmath nlopt/lib/libnlopt.a -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-nloptr/00new/nloptr/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘nloptr’ as ‘nloptr_2.0.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (nloptr)
* installing *source* package ‘checkmate’ ...
** package ‘checkmate’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c all_missing.c -o all_missing.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c any_infinite.c -o any_infinite.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c any_missing.c -o any_missing.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c any_nan.c -o any_nan.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c checks.c -o checks.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c find_nchar.c -o find_nchar.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c guess_type.c -o guess_type.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c helper.c -o helper.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c integerish.c -o integerish.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c is_sorted.c -o is_sorted.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c qassert.c -o qassert.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c which_first.c -o which_first.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o checkmate.so all_missing.o any_infinite.o any_missing.o any_nan.o checks.o find_nchar.o guess_type.o helper.o init.o integerish.o is_sorted.o qassert.o which_first.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-checkmate/00new/checkmate/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘checkmate’ as ‘checkmate_2.1.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (checkmate)
* installing *source* package ‘mlbench’ ...
** package ‘mlbench’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c waveform.c -o waveform.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o mlbench.so init.o waveform.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-mlbench/00new/mlbench/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘mlbench’ as ‘mlbench_2.1-3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mlbench)
* installing *source* package ‘palmerpenguins’ ...
** package ‘palmerpenguins’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘palmerpenguins’ as ‘palmerpenguins_0.1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (palmerpenguins)
* installing *source* package ‘shape’ ...
** package ‘shape’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘shape’ as ‘shape_1.4.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shape)
* installing *source* package ‘numDeriv’ ...
** package ‘numDeriv’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘numDeriv’ as ‘numDeriv_2016.8-1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (numDeriv)
* installing *source* package ‘beanplot’ ...
** package ‘beanplot’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘beanplot’ as ‘beanplot_1.3.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (beanplot)
* installing *source* package ‘gridBase’ ...
** package ‘gridBase’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘gridBase’ as ‘gridBase_0.4-7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gridBase)
* installing *source* package ‘LiblineaR’ ...
** package ‘LiblineaR’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c linear.cpp -o linear.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c predictLinear.c -o predictLinear.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c trainLinear.c -o trainLinear.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c tron.cpp -o tron.o
g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o LiblineaR.so init.o linear.o predictLinear.o trainLinear.o tron.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-LiblineaR/00new/LiblineaR/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘LiblineaR’ as ‘LiblineaR_2.10-22_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (LiblineaR)
* installing *source* package ‘pROC’ ...
** package ‘pROC’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppVersion.cpp -o RcppVersion.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c delong.cpp -o delong.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c perfsAll.cpp -o perfsAll.o
g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o pROC.so RcppExports.o RcppVersion.o delong.o perfsAll.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-pROC/00new/pROC/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘pROC’ as ‘pROC_1.18.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (pROC)
* installing *source* package ‘PRROC’ ...
** package ‘PRROC’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘PRROC’ as ‘PRROC_1.3.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (PRROC)
* installing *source* package ‘infotheo’ ...
** package ‘infotheo’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c discretize.cpp -o discretize.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c entropy.cpp -o entropy.o
g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o infotheo.so discretize.o entropy.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-infotheo/00new/infotheo/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘infotheo’ as ‘infotheo_1.2.0.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (infotheo)
* installing *source* package ‘corrplot’ ...
** package ‘corrplot’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘corrplot’ as ‘corrplot_0.92_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (corrplot)
* installing *source* package ‘lgr’ ...
** package ‘lgr’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘lgr’ as ‘lgr_0.4.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (lgr)
* installing *source* package ‘mlr3measures’ ...
** package ‘mlr3measures’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘mlr3measures’ as ‘mlr3measures_0.5.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mlr3measures)
* installing *source* package ‘mlr3misc’ ...
** package ‘mlr3misc’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c count_missing.c -o count_missing.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c keep_in_bounds.c -o keep_in_bounds.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c to_decimal.c -o to_decimal.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c which_max.c -o which_max.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o mlr3misc.so count_missing.o init.o keep_in_bounds.o to_decimal.o which_max.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-mlr3misc/00new/mlr3misc/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘mlr3misc’ as ‘mlr3misc_0.11.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mlr3misc)
* installing *source* package ‘lme4’ ...
** package ‘lme4’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppEigen/include'   -DNDEBUG -DEIGEN_DONT_VECTORIZE -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c external.cpp -o external.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppEigen/include'   -DNDEBUG -DEIGEN_DONT_VECTORIZE -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c glmFamily.cpp -o glmFamily.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppEigen/include'   -DNDEBUG -DEIGEN_DONT_VECTORIZE -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c optimizer.cpp -o optimizer.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppEigen/include'   -DNDEBUG -DEIGEN_DONT_VECTORIZE -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c predModule.cpp -o predModule.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppEigen/include'   -DNDEBUG -DEIGEN_DONT_VECTORIZE -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c respModule.cpp -o respModule.o
g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o lme4.so external.o glmFamily.o optimizer.o predModule.o respModule.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-lme4/00new/lme4/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘lme4’ as ‘lme4_1.1-31_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (lme4)
* installing *source* package ‘glmnet’ ...
** package ‘glmnet’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
RcppExports.cpp:25:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c coxnet5dpclean.f -o coxnet5dpclean.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c elnet_exp.cpp -o elnet_exp.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
elnet_exp.cpp:44:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
elnet_exp.cpp:44:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, 1, -1, false, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:34:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/base.hpp:12:20:   required from ‘void glmnetpp::ElnetDriverBase::normalize_penalty(VType&&) const [with VType = Eigen::Matrix<double, -1, 1>&]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:402:13:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:38:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorBlock.h:56:47:   required from ‘class Eigen::VectorBlock<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:18:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:39:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:36:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:15:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:52:29:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:56:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:41:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:48:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:35:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Matrix<double, -1, -1>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:430:16:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:20:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator*=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:33:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:56:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:276:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:51:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:60:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:399:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:110:60:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:110:60:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:282:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:23:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:343:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:344:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:96:31:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:159:16:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:296:18:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:174:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:40:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:48:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:36:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:19:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:31:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:34:67:   required from ‘Derived& Eigen::ArrayBase<Derived>::operator-=(const Scalar&) [with Derived = Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; Eigen::ArrayBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:82:44:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:88:40:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:86:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:58:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:87:   required from ‘auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::prediction() const [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_base.hpp:140:16:   required from ‘void glmnetpp::ElnetPathPoissonBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:26:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:43:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:88:29:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:32:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:41:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   required from ‘static typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::compute_xv(const XType&, const WType&) [with XType = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:71:52:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:336:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:48:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:22:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:34:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:19:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:23:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:35:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:54:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:47:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:27:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:46:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:354:30:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:73:69:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, ISType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Matrix<double, -1, -1>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ISType = Eigen::Matrix<int, -1, 1>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:327:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Matrix<int, -1, 1>; Eigen::DenseBase<Derived>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:501:10:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:394:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialMultiClassBase::process_point_fit(const FitPackType&, PathConfigPackType&&, PointConfigPackType&&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1402:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:76:62:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:56:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:44:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const RType&, const VType&) const [with RType = Eigen::Matrix<double, -1, 1>; VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:77:64:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:130:48:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:163:38:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:69:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:136:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:139:68:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:168:65:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:60:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:69:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:81:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:568:53:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:354:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, RType&&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1166:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:589:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:35:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:42:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:48:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:56:7:   required from ‘class Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:661:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:605:36:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:44:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:26:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:57:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:47:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:80:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:86:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:53:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:82:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:88:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:113:48:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)> [with auto:43 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1381:54:   required from ‘void glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::update_with_new_weights(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const VType&, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t&) [with VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:121:55:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:137:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:50&)> [with auto:50 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:101:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)> [with auto:65 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)>; SkipPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:66)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:100:51:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:59:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:68:81:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:643:34:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:645:27:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:648:50:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1007:53:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   required from ‘glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdateYPredFType, UpdatePPredFType, InitResidFType, ComputeGradFType) [with UpdateYPredFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, auto:42&)>; UpdatePPredFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:34)> [with auto:34 = int]’
/usr/include/c++/9/bits/stl_algo.h:3882:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:62:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:84:33:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:39:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:50:35:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:50:60:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>; U = Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:65:36:   required from ‘Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:54:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Matrix<double, -1, -1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:531:48:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:546:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:155:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:156:37:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, DestType&&) const [with DestType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:162:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:55:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:88:14:   required from ‘static auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::compute_sp_cov(const X1Type&, const X2Type&, const WType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t) [with X1Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; X2Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:65:42:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::update_active(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:81:25:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:99:47:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:269:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:91:45:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:438:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1205:25:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:127:53:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:58:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:142:43:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:322:14:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:405:26:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:219:27:   required from ‘static constexpr bool glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::equal(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) [with T1 = Eigen::Matrix<double, -1, 1>; T2 = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:75:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:91:43:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/binomial_multi_class_group.hpp:34:37:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:570:18:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:610:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:21:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:736:20:   required from ‘void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Functor = Eigen::internal::assign_op<int, int>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from ‘static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Functor = Eigen::internal::assign_op<int, int>; Weak = void]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from ‘void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Func = Eigen::internal::assign_op<int, int>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from ‘void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Func = Eigen::internal::assign_op<int, int>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from ‘void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Assign.h:66:28:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:499,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   required from ‘static void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int Options = 0; Scalar = double; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:351:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  351 | typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                       ^~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:352:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  352 | typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                       ^~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:353:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  353 | typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                       ^~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:22:9:   required from ‘class Eigen::internal::SparseTransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 1024>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:45:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:194:40:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int ProductType = 7; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:194:40:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:499,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   required from ‘static void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int Options = 0; Scalar = double; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:385:62: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  385 |   conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj;
      |                                                              ^~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:385:62: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:438:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:27:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_dlx(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:87:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_cov.hpp:55:75:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:703:14:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:371,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/Memory.h: In instantiation of ‘Index Eigen::internal::first_default_aligned(const Scalar*, Index) [with Scalar = double; Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/BlasUtil.h:263:43:   required from ‘Index Eigen::internal::blas_data_mapper<Scalar, Index, StorageOrder, AlignmentType, 1>::firstAligned(Index) const [with Scalar = const double; Index = long int; int StorageOrder = 0; int AlignmentType = 0]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:400:9:   required from ‘static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/Memory.h:470:10: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  470 |   return first_aligned<unpacket_traits<DefaultPacketType>::alignment>(array, size);
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:104:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; ResultType = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1318:40:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:637:5:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:104:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; ResultType = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1316:40:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:637:5:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c glmnet_init.cpp -o glmnet_init.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c internal.cpp -o internal.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb.c -o pb.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb_exp.cpp -o pb_exp.o
g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c wls_exp.cpp -o wls_exp.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
wls_exp.cpp:40:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
wls_exp.cpp:40:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:150:32:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
glmnetpp/include/glmnetpp_bits/elnet_point/sp_gaussian_wls.hpp:7:8:   required from ‘struct glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:125:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:26:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:34:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:43:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:52:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:32:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:56:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:336:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:409:54:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:336:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:83:14:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:27:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:45:7:   required from ‘Eigen::CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Eigen::Sparse>::CwiseBinaryOpImpl() [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; Lhs = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Rhs = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:105:49:   required from ‘Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::CwiseBinaryOp(const Lhs&, const Rhs&, const BinaryOp&) [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; LhsType = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; RhsType = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:693:62:   required from ‘const typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type Eigen::SparseMatrixBase<Derived>::cwiseProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:65:36:   required from ‘Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived = Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:134:27:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:327:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::DenseBase<Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:501:10:   required from ‘Derived& Eigen::DenseBase<Derived>::setZero() [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:143:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o glmnet.so RcppExports.o coxnet5dpclean.o elnet_exp.o glmnet_init.o internal.o pb.o pb_exp.o wls_exp.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-glmnet/00new/glmnet/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘glmnet’ as ‘glmnet_4.1-6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (glmnet)
* installing *source* package ‘lmerTest’ ...
** package ‘lmerTest’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘lmerTest’ as ‘lmerTest_3.1-3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (lmerTest)
* installing *source* package ‘paradox’ ...
** package ‘paradox’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘paradox’ as ‘paradox_0.11.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (paradox)
* installing *source* package ‘bbotk’ ...
** package ‘bbotk’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c is_dominated.c -o is_dominated.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o bbotk.so init.o is_dominated.o -L/usr/lib/R/lib -lR
installing to /tmp/built/00LOCK-bbotk/00new/bbotk/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘bbotk’ as ‘bbotk_0.7.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bbotk)
* installing *source* package ‘mlr3’ ...
** package ‘mlr3’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘mlr3’ as ‘mlr3_0.14.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mlr3)
* installing *source* package ‘mlr3learners’ ...
** package ‘mlr3learners’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘mlr3learners’ as ‘mlr3learners_0.5.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mlr3learners)
* installing *source* package ‘mlr3tuning’ ...
** package ‘mlr3tuning’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘mlr3tuning’ as ‘mlr3tuning_0.18.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mlr3tuning)
* installing *source* package ‘SIAMCAT’ ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
Note: possible error in 'tune(method = "grid_search", ': unused argument (resolution = grid.size) 
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SIAMCAT’ as ‘SIAMCAT_2.2.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SIAMCAT)

The downloaded source packages are in
	‘/tmp/RtmpVXdMQd/downloaded_packages’
Old packages: 'AnnotationDbi', 'BH', 'BiocFileCache', 'BiocManager',
  'BiocParallel', 'broom', 'bslib', 'cachem', 'class', 'cli', 'codetools',
  'colorspace', 'curl', 'data.table', 'dbplyr', 'DESeq2', 'digest', 'dplyr',
  'DT', 'dtplyr', 'edgeR', 'evaluate', 'fansi', 'fastmap', 'fontawesome',
  'forcats', 'formatR', 'fs', 'future', 'gargle', 'GenomeInfoDb',
  'GenomicFeatures', 'GenomicRanges', 'ggplot2', 'ggrepel', 'gh', 'haven',
  'highr', 'htmlwidgets', 'httpuv', 'httr', 'igraph', 'IRkernel', 'isoband',
  'knitr', 'limma', 'listenv', 'locfit', 'lubridate', 'MASS', 'mgcv', 'nlme',
  'openssl', 'parallelly', 'pbapply', 'pbdZMQ', 'pkgdown', 'progressr',
  'purrr', 'ragg', 'Rcpp', 'RcppArmadillo', 'RcppTOML', 'RCurl', 'readr',
  'readxl', 'repr', 'reticulate', 'rmarkdown', 'roxygen2', 'RSQLite',
  'S4Vectors', 'sass', 'scran', 'scuttle', 'shiny', 'sourcetools', 'sp',
  'spatial', 'spatstat.explore', 'spatstat.geom', 'spatstat.random', 'statmod',
  'stringi', 'survival', 'testthat', 'tibble', 'tidyr', 'tidyverse',
  'timechange', 'tinytex', 'utf8', 'vctrs', 'vroom', 'xfun', 'yaml'

real	6m19.577s
user	6m5.880s
sys	0m28.917s

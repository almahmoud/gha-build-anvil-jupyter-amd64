+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''EventPointer'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'?repositories' for details

replacement repositories:
    CRAN: https://cloud.r-project.org

Bioconductor version 3.16 (BiocManager 1.30.19), R 4.2.2 Patched (2022-11-10
  r83330)
Installing package(s) 'EventPointer'
Warning: dependency ‘speedglm’ is not available
also installing the dependencies ‘numDeriv’, ‘SQUAREM’, ‘MatrixModels’, ‘diagram’, ‘lava’, ‘SparseM’, ‘quantreg’, ‘shape’, ‘nnls’, ‘prodlim’, ‘doParallel’, ‘foreach’, ‘cobs’, ‘glmnet’, ‘iterators’, ‘lpSolve’, ‘poibin’

trying URL 'https://cloud.r-project.org/src/contrib/numDeriv_2016.8-1.1.tar.gz'
Content type 'application/x-gzip' length 76053 bytes (74 KB)
==================================================
downloaded 74 KB

trying URL 'https://cloud.r-project.org/src/contrib/SQUAREM_2021.1.tar.gz'
Content type 'application/x-gzip' length 241534 bytes (235 KB)
==================================================
downloaded 235 KB

trying URL 'https://cloud.r-project.org/src/contrib/MatrixModels_0.5-1.tar.gz'
Content type 'application/x-gzip' length 24022 bytes (23 KB)
==================================================
downloaded 23 KB

trying URL 'https://cloud.r-project.org/src/contrib/diagram_1.6.5.tar.gz'
Content type 'application/x-gzip' length 536872 bytes (524 KB)
==================================================
downloaded 524 KB

trying URL 'https://cloud.r-project.org/src/contrib/lava_1.7.2.1.tar.gz'
Content type 'application/x-gzip' length 1106717 bytes (1.1 MB)
==================================================
downloaded 1.1 MB

trying URL 'https://cloud.r-project.org/src/contrib/SparseM_1.81.tar.gz'
Content type 'application/x-gzip' length 735100 bytes (717 KB)
==================================================
downloaded 717 KB

trying URL 'https://cloud.r-project.org/src/contrib/quantreg_5.95.tar.gz'
Content type 'application/x-gzip' length 1026027 bytes (1001 KB)
==================================================
downloaded 1001 KB

trying URL 'https://cloud.r-project.org/src/contrib/shape_1.4.6.tar.gz'
Content type 'application/x-gzip' length 677262 bytes (661 KB)
==================================================
downloaded 661 KB

trying URL 'https://cloud.r-project.org/src/contrib/nnls_1.4.tar.gz'
Content type 'application/x-gzip' length 10538 bytes (10 KB)
==================================================
downloaded 10 KB

trying URL 'https://cloud.r-project.org/src/contrib/prodlim_2023.03.31.tar.gz'
Content type 'application/x-gzip' length 128568 bytes (125 KB)
==================================================
downloaded 125 KB

trying URL 'https://cloud.r-project.org/src/contrib/doParallel_1.0.17.tar.gz'
Content type 'application/x-gzip' length 164254 bytes (160 KB)
==================================================
downloaded 160 KB

trying URL 'https://cloud.r-project.org/src/contrib/foreach_1.5.2.tar.gz'
Content type 'application/x-gzip' length 89758 bytes (87 KB)
==================================================
downloaded 87 KB

trying URL 'https://cloud.r-project.org/src/contrib/cobs_1.3-5.tar.gz'
Content type 'application/x-gzip' length 130291 bytes (127 KB)
==================================================
downloaded 127 KB

trying URL 'https://cloud.r-project.org/src/contrib/glmnet_4.1-7.tar.gz'
Content type 'application/x-gzip' length 2436304 bytes (2.3 MB)
==================================================
downloaded 2.3 MB

trying URL 'https://cloud.r-project.org/src/contrib/iterators_1.0.14.tar.gz'
Content type 'application/x-gzip' length 300266 bytes (293 KB)
==================================================
downloaded 293 KB

trying URL 'https://cloud.r-project.org/src/contrib/lpSolve_5.6.18.tar.gz'
Content type 'application/x-gzip' length 467989 bytes (457 KB)
==================================================
downloaded 457 KB

trying URL 'https://cloud.r-project.org/src/contrib/poibin_1.5.tar.gz'
Content type 'application/x-gzip' length 15710 bytes (15 KB)
==================================================
downloaded 15 KB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/EventPointer_3.6.0.tar.gz'
Content type 'application/x-gzip' length 1721102 bytes (1.6 MB)
==================================================
downloaded 1.6 MB

* installing *source* package ‘numDeriv’ ...
** package ‘numDeriv’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘numDeriv’ as ‘numDeriv_2016.8-1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (numDeriv)
* installing *source* package ‘SQUAREM’ ...
** package ‘SQUAREM’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SQUAREM’ as ‘SQUAREM_2021.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SQUAREM)
* installing *source* package ‘MatrixModels’ ...
** package ‘MatrixModels’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘MatrixModels’ as ‘MatrixModels_0.5-1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (MatrixModels)
* installing *source* package ‘SparseM’ ...
** package ‘SparseM’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c bckslv.f -o bckslv.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c chol.f -o chol.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c chol2csr.f -o chol2csr.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c cholesky.f -o cholesky.o
cholesky.f:2948:72:

 2948 |                          IF  ( NODE )  400, 900, 500
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:2982:72:

 2982 |                  IF  ( RNODE )  1100, 1800, 1200
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:3299:72:

 3299 |                      IF  ( ENODE )  400, 800, 500
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:3356:72:

 3356 |                              IF  ( NODE )  1000, 2100, 1100
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:3430:72:

 3430 |                                          IF  ( NODE )  1700, 2000, 1800
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c csr.f -o csr.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c extract.f -o extract.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c sparskit.f -o sparskit.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c subscr.f -o subscr.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o SparseM.so bckslv.o chol.o chol2csr.o cholesky.o csr.o extract.o init.o sparskit.o subscr.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-SparseM/00new/SparseM/libs
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
Creating a generic function for ‘diag’ from package ‘base’ in package ‘SparseM’
Creating a generic function for ‘diag<-’ from package ‘base’ in package ‘SparseM’
Creating a generic function for ‘norm’ from package ‘base’ in package ‘SparseM’
Creating a new generic function for ‘backsolve’ in package ‘SparseM’
Creating a generic function for ‘forwardsolve’ from package ‘base’ in package ‘SparseM’
Creating a generic function for ‘model.response’ from package ‘stats’ in package ‘SparseM’
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SparseM’ as ‘SparseM_1.81_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SparseM)
* installing *source* package ‘shape’ ...
** package ‘shape’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘shape’ as ‘shape_1.4.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shape)
* installing *source* package ‘nnls’ ...
** package ‘nnls’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c lawson_hanson_nnls.f -o lawson_hanson_nnls.o
lawson_hanson_nnls.f:112:72:

  112 |    10     CL=MAX(abs(U(1,J)),CL)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
lawson_hanson_nnls.f:113:72:

  113 |       IF (CL) 130,130,20
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
lawson_hanson_nnls.f:117:72:

  117 |    30     SM=SM+(U(1,J)*CLINV)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 30 at (1)
lawson_hanson_nnls.f:119:72:

  119 |       IF (U(1,LPIVOT)) 50,50,40
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
lawson_hanson_nnls.f:126:72:

  126 |    60 IF (CL) 130,130,70
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
lawson_hanson_nnls.f:131:72:

  131 |       IF (B) 80,130,130
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
lawson_hanson_nnls.f:142:72:

  142 |    90         I3=I3+ICE
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
lawson_hanson_nnls.f:143:72:

  143 |           IF (SM) 100,120,100
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
lawson_hanson_nnls.f:148:72:

  148 |   110         I4=I4+ICE
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 110 at (1)
lawson_hanson_nnls.f:227:72:

  227 |    20     INDEX(I)=I
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
lawson_hanson_nnls.f:246:72:

  246 |    40        SM=SM+A(L,J)*B(L)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
lawson_hanson_nnls.f:276:72:

  276 |    90       UNORM=UNORM+A(L,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
lawson_hanson_nnls.f:285:72:

  285 |   120        ZZ(L)=B(L)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
lawson_hanson_nnls.f:309:72:

  309 |   150    B(L)=ZZ(L)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
lawson_hanson_nnls.f:326:72:

  326 |   180       A(L,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
lawson_hanson_nnls.f:428:72:

  428 |   310     ZZ(I)=B(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
lawson_hanson_nnls.f:438:72:

  438 |   340     X(I)=ZZ(IP)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 340 at (1)
lawson_hanson_nnls.f:451:72:

  451 |   360       SM=SM+B(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 360 at (1)
lawson_hanson_nnls.f:454:72:

  454 |   380       W(J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 380 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c nnnpls.f -o nnnpls.o
nnnpls.f:96:72:

   96 |    20     INDEX(I)=I
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
nnnpls.f:115:72:

  115 |    40        SM=SM+A(L,J)*B(L)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 40 at (1)
nnnpls.f:145:72:

  145 |    90       UNORM=UNORM+A(L,J)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
nnnpls.f:154:72:

  154 |   120        ZZ(L)=B(L)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 120 at (1)
nnnpls.f:178:72:

  178 |   150    B(L)=ZZ(L)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 150 at (1)
nnnpls.f:195:72:

  195 |   180       A(L,J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 180 at (1)
nnnpls.f:297:72:

  297 |   310     ZZ(I)=B(I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
nnnpls.f:307:72:

  307 |   340     X(I)=ZZ(IP)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 340 at (1)
nnnpls.f:330:72:

  330 |   360       SM=SM+B(I)**2
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 360 at (1)
nnnpls.f:333:72:

  333 |   380       W(J)=ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 380 at (1)
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o nnls.so lawson_hanson_nnls.o nnnpls.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-nnls/00new/nnls/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘nnls’ as ‘nnls_1.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (nnls)
* installing *source* package ‘iterators’ ...
** package ‘iterators’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘iterators’ as ‘iterators_1.0.14_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (iterators)
* installing *source* package ‘lpSolve’ ...
** package ‘lpSolve’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c colamd.c -o colamd.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c commonlib.c -o commonlib.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c hbio.c -o hbio.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c ini.c -o ini.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c isfixedvar.c -o isfixedvar.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_Hash.c -o lp_Hash.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_LUSOL.c -o lp_LUSOL.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_MDO.c -o lp_MDO.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_MPS.c -o lp_MPS.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_SOS.c -o lp_SOS.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_crash.c -o lp_crash.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_lib.c -o lp_lib.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_matrix.c -o lp_matrix.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_mipbb.c -o lp_mipbb.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_params.c -o lp_params.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_presolve.c -o lp_presolve.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_price.c -o lp_price.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_pricePSE.c -o lp_pricePSE.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_report.c -o lp_report.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_rlp.c -o lp_rlp.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_scale.c -o lp_scale.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_simplex.c -o lp_simplex.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_utils.c -o lp_utils.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lp_wlp.c -o lp_wlp.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lpslink56.c -o lpslink56.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lusol.c -o lusol.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lusolio.c -o lusolio.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c mmio.c -o mmio.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c myblas.c -o myblas.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c sparselib.c -o sparselib.o
gcc -I"/usr/share/R/include" -DNDEBUG -I . -DINTEGERTIME -DPARSER_LP -DBUILDING_FOR_R -DYY_NEVER_INTERACTIVE -DUSRDLL -DCLOCKTIME -DRoleIsExternalInvEngine -DINVERSE_ACTIVE=INVERSE_LUSOL -DINLINE=static -DParanoia     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c yacc_read.c -o yacc_read.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o lpSolve.so colamd.o commonlib.o hbio.o ini.o init.o isfixedvar.o lp_Hash.o lp_LUSOL.o lp_MDO.o lp_MPS.o lp_SOS.o lp_crash.o lp_lib.o lp_matrix.o lp_mipbb.o lp_params.o lp_presolve.o lp_price.o lp_pricePSE.o lp_report.o lp_rlp.o lp_scale.o lp_simplex.o lp_utils.o lp_wlp.o lpslink56.o lusol.o lusolio.o mmio.o myblas.o sparselib.o yacc_read.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-lpSolve/00new/lpSolve/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘lpSolve’ as ‘lpSolve_5.6.18_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (lpSolve)
* installing *source* package ‘poibin’ ...
** package ‘poibin’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c dftcf.c -o dftcf.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c poibin_init.c -o poibin_init.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o poibin.so dftcf.o poibin_init.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-poibin/00new/poibin/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘poibin’ as ‘poibin_1.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (poibin)
* installing *source* package ‘diagram’ ...
** package ‘diagram’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘diagram’ as ‘diagram_1.6.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (diagram)
* installing *source* package ‘lava’ ...
** package ‘lava’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘lava’ as ‘lava_1.7.2.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (lava)
* installing *source* package ‘quantreg’ ...
** package ‘quantreg’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c akj.f -o akj.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c boot.f -o boot.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c bound.f -o bound.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c boundc.f -o boundc.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c brute.f -o brute.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c chlfct.f -o chlfct.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c cholesky.f -o cholesky.o
cholesky.f:2946:72:

 2946 |                          IF  ( NODE )  400, 900, 500
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:2980:72:

 2980 |                  IF  ( RNODE )  1100, 1800, 1200
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:3297:72:

 3297 |                      IF  ( ENODE )  400, 800, 500
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:3354:72:

 3354 |                              IF  ( NODE )  1000, 2100, 1100
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
cholesky.f:3428:72:

 3428 |                                          IF  ( NODE )  1700, 2000, 1800
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c combos.f -o combos.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c crqf.f -o crqf.o
crqf.f:98:72:

   98 |         DO 5 J=1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 5 at (1)
crqf.f:99:72:

   99 |    5    WA(I,J) = X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 5 at (1)
crqf.f:140:72:

  140 |   25      WA(L,J) = X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 25 at (1)
crqf.f:149:72:

  149 |   50  SOL(J+1,1) = WF(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 50 at (1)
crqf.f:165:72:

  165 |   60    XH(K,J) = X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
crqf.f:180:72:

  180 |   80  S = S - WF(J)*X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 80 at (1)
crqf.f:181:72:

  181 |   90  WE(I) = S
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
crqf.f:192:72:

  192 |  210  S = DMIN1(WD(J),S)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 210 at (1)
crqf.f:205:72:

  205 |  240    SOL(J+1,LSOL) = WF(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 240 at (1)
crqf.f:226:72:

  226 |  250  WD(I) = ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 250 at (1)
crqf.f:228:72:

  228 |  260  WD(H(J)) = ONE
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 260 at (1)
crqf.f:236:72:

  236 |  270  S = S + X(I,J)*XH(J,KM)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 270 at (1)
crqf.f:258:72:

  258 |         DO 310 J = 1,N
      |                                                                        1
Warning: Fortran 2018 deleted feature: Shared DO termination label 310 at (1)
crqf.f:259:72:

  259 |  310    XH(K,J) = X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 310 at (1)
crqf.f:273:72:

  273 |  330  S = S + XH(K,J)*Y(H(J))
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 330 at (1)
crqf.f:274:72:

  274 |  340  WF(K) = S
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 340 at (1)
crqf.f:278:72:

  278 |  350  S = S - WF(J)*X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 350 at (1)
crqf.f:279:72:

  279 |  360  WE(I) = S
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 360 at (1)
crqf.f:287:72:

  287 |  370    SOL(J+1,LSOL) = WF(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 370 at (1)
crqf.f:330:72:

  330 | 396       B2 = B2 + X(I,J) * SOL(J+1,LSOL - 1)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 396 at (1)
crqf.f:369:72:

  369 |  506  WF(J) = ZERO
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 506 at (1)
crqf.f:376:72:

  376 |  510      WA(L1,J) = X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 510 at (1)
crqf.f:379:72:

  379 |  514      WF(J) = WF(J) + X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 514 at (1)
crqf.f:389:72:

  389 |  520      WF(J) = WF(J) + (ONE - W) * X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 520 at (1)
crqf.f:394:72:

  394 |  534  WA(MAL,J) = WF(J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 534 at (1)
crqf.f:413:72:

  413 |  540        XH(K,J) = X(I,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 540 at (1)
crqf.f:429:72:

  429 |  610  WD(I) = SOL(N+2,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 610 at (1)
crqf.f:441:72:

  441 |  650  WF(J) = S/V
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 650 at (1)
crqf.f:445:72:

  445 |  660    S = S + WF(J) * SOL(J+1,I)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 660 at (1)
crqf.f:446:72:

  446 |  670  SOL(N+2,I) = S
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 670 at (1)
crqf.f:487:72:

  487 |   60    A = A + X(I,K)*XH(K,J)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 60 at (1)
crqf.f:488:72:

  488 |   70  WA(I,J) = A
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 70 at (1)
crqf.f:497:72:

  497 |   90  IFLAG(I) = 0
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 90 at (1)
crqf.f:499:72:

  499 |   95  IFLAG(H(J)) = 1
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 95 at (1)
crqf.f:544:72:

  544 |  130  IFLAG(J) = IFLAG(J+M)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 130 at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c crqfnb.f -o crqfnb.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c dsel05.f -o dsel05.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c etime.f -o etime.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c extract.f -o extract.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c frand.c -o frand.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c grexp.f -o grexp.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c idmin.f -o idmin.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c iswap.f -o iswap.o
iswap.f:40:72:

   40 |       IF (INCX-1) 5,20,60
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c kuantile.f -o kuantile.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c kuantiles.f -o kuantiles.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c linpack.f -o linpack.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c mcmb.c -o mcmb.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c penalty.f -o penalty.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c pfnb.f -o pfnb.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c powell.f -o powell.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c profnb.f -o profnb.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c pwxy.f -o pwxy.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c qfnb.f -o qfnb.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c qselect.f -o qselect.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c quantreg_init.c -o quantreg_init.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rls.f -o rls.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rq0.f -o rq0.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rq1.f -o rq1.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rqbr.f -o rqbr.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rqfn.f -o rqfn.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rqfnb.f -o rqfnb.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rqfnc.f -o rqfnc.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c rqs.f -o rqs.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c sakj.f -o sakj.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c sparskit2.f -o sparskit2.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c srqfn.f -o srqfn.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c srqfnc.f -o srqfnc.o
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c srtpai.f -o srtpai.o
srtpai.f:19:72:

   19 |  10     P(1, I) = I
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o quantreg.so akj.o boot.o bound.o boundc.o brute.o chlfct.o cholesky.o combos.o crqf.o crqfnb.o dsel05.o etime.o extract.o frand.o grexp.o idmin.o iswap.o kuantile.o kuantiles.o linpack.o mcmb.o penalty.o pfnb.o powell.o profnb.o pwxy.o qfnb.o qselect.o quantreg_init.o rls.o rq0.o rq1.o rqbr.o rqfn.o rqfnb.o rqfnc.o rqs.o sakj.o sparskit2.o srqfn.o srqfnc.o srtpai.o -llapack -lblas -lgfortran -lm -lquadmath -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-quantreg/00new/quantreg/libs
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘quantreg’ as ‘quantreg_5.95_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (quantreg)
* installing *source* package ‘foreach’ ...
** package ‘foreach’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘foreach’ as ‘foreach_1.5.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (foreach)
* installing *source* package ‘prodlim’ ...
** package ‘prodlim’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c GMLE.c -o GMLE.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c IntIndex.c -o IntIndex.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c icens_prodlim.c -o icens_prodlim.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c icens_prodlim_ml.c -o icens_prodlim_ml.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c iindex.c -o iindex.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c life_table.c -o life_table.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c loo.c -o loo.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c neighborhood.c -o neighborhood.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c predict.c -o predict.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c predict_individual_survival.c -o predict_individual_survival.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c prodlim.c -o prodlim.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c prodlim_clustersurv.c -o prodlim_clustersurv.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c prodlim_comprisk.c -o prodlim_comprisk.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c prodlim_multistates.c -o prodlim_multistates.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c prodlim_surv.c -o prodlim_surv.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c sindex.c -o sindex.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c summary_prodlim.c -o summary_prodlim.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o prodlim.so GMLE.o IntIndex.o icens_prodlim.o icens_prodlim_ml.o iindex.o init.o life_table.o loo.o neighborhood.o predict.o predict_individual_survival.o prodlim.o prodlim_clustersurv.o prodlim_comprisk.o prodlim_multistates.o prodlim_surv.o sindex.o summary_prodlim.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-prodlim/00new/prodlim/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘prodlim’ as ‘prodlim_2023.03.31_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (prodlim)
* installing *source* package ‘doParallel’ ...
** package ‘doParallel’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘doParallel’ as ‘doParallel_1.0.17_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (doParallel)
* installing *source* package ‘cobs’ ...
** package ‘cobs’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c SR.c -o SR.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c nrutil.c -o nrutil.o
gcc -I"/usr/share/R/include" -DNDEBUG      -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c splines.c -o splines.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o cobs.so SR.o init.o nrutil.o splines.o -lblas -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-cobs/00new/cobs/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘cobs’ as ‘cobs_1.3-5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (cobs)
* installing *source* package ‘glmnet’ ...
** package ‘glmnet’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
RcppExports.cpp:25:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gfortran -fno-optimize-sibling-calls  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong  -c coxnet5dpclean.f -o coxnet5dpclean.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c elnet_exp.cpp -o elnet_exp.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
elnet_exp.cpp:44:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
elnet_exp.cpp:44:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, 1, -1, false, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:34:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/base.hpp:12:20:   required from ‘void glmnetpp::ElnetDriverBase::normalize_penalty(VType&&) const [with VType = Eigen::Matrix<double, -1, 1>&]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:402:13:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:38:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorBlock.h:56:47:   required from ‘class Eigen::VectorBlock<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:18:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:39:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:36:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:15:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:52:29:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:56:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:41:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:48:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:35:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Matrix<double, -1, -1>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:430:16:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:20:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator*=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:33:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:56:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:276:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:51:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:60:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:399:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:110:60:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:110:60:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:282:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:23:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:343:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:344:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:96:31:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:159:16:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:296:18:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:174:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:40:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:48:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:36:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:19:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:31:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:34:67:   required from ‘Derived& Eigen::ArrayBase<Derived>::operator-=(const Scalar&) [with Derived = Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; Eigen::ArrayBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:82:44:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:88:40:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:86:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:58:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:87:   required from ‘auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::prediction() const [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_base.hpp:140:16:   required from ‘void glmnetpp::ElnetPathPoissonBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:26:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:43:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:88:29:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:32:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:41:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   required from ‘static typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::compute_xv(const XType&, const WType&) [with XType = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:71:52:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:336:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:48:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:22:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:34:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:19:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:23:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:35:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:54:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:47:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:27:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:46:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:354:30:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:73:69:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, ISType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Matrix<double, -1, -1>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ISType = Eigen::Matrix<int, -1, 1>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:327:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Matrix<int, -1, 1>; Eigen::DenseBase<Derived>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:501:10:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:394:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialMultiClassBase::process_point_fit(const FitPackType&, PathConfigPackType&&, PointConfigPackType&&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1402:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:76:62:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:56:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:44:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const RType&, const VType&) const [with RType = Eigen::Matrix<double, -1, 1>; VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:77:64:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:130:48:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:163:38:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:69:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:136:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:139:68:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:168:65:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:60:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:69:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:81:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:568:53:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:354:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, RType&&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1166:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:589:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:35:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:42:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:48:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:56:7:   required from ‘class Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:661:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:605:36:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:44:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:26:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:57:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:47:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:80:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:86:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:53:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:82:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:88:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:113:48:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)> [with auto:43 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1381:54:   required from ‘void glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::update_with_new_weights(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const VType&, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t&) [with VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:121:55:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:137:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:50&)> [with auto:50 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:101:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)> [with auto:65 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)>; SkipPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:66)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:100:51:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:59:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:68:81:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:643:34:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:645:27:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:648:50:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1007:53:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   required from ‘glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdateYPredFType, UpdatePPredFType, InitResidFType, ComputeGradFType) [with UpdateYPredFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, auto:42&)>; UpdatePPredFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:34)> [with auto:34 = int]’
/usr/include/c++/9/bits/stl_algo.h:3882:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:62:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:84:33:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:39:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:50:35:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:50:60:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>; U = Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:65:36:   required from ‘Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:54:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Matrix<double, -1, -1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:531:48:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:546:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:155:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:156:37:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, DestType&&) const [with DestType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:162:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:55:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:88:14:   required from ‘static auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::compute_sp_cov(const X1Type&, const X2Type&, const WType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t) [with X1Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; X2Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:65:42:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::update_active(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:81:25:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:99:47:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:269:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:91:45:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:438:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1205:25:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:127:53:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:58:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:142:43:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:322:14:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:405:26:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:219:27:   required from ‘static constexpr bool glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::equal(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) [with T1 = Eigen::Matrix<double, -1, 1>; T2 = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:75:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:91:43:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/binomial_multi_class_group.hpp:34:37:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:570:18:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:610:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:21:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:736:20:   required from ‘void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Functor = Eigen::internal::assign_op<int, int>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from ‘static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Functor = Eigen::internal::assign_op<int, int>; Weak = void]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from ‘void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Func = Eigen::internal::assign_op<int, int>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from ‘void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Func = Eigen::internal::assign_op<int, int>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from ‘void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Assign.h:66:28:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:499,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   required from ‘static void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int Options = 0; Scalar = double; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:351:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  351 | typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                       ^~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:352:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  352 | typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                       ^~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:353:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  353 | typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                       ^~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:22:9:   required from ‘class Eigen::internal::SparseTransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 1024>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:45:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:194:40:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int ProductType = 7; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:194:40:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:499,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   required from ‘static void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int Options = 0; Scalar = double; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:385:62: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  385 |   conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj;
      |                                                              ^~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:385:62: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:438:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:27:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_dlx(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:87:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_cov.hpp:55:75:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:703:14:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:371,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/Memory.h: In instantiation of ‘Index Eigen::internal::first_default_aligned(const Scalar*, Index) [with Scalar = double; Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/BlasUtil.h:263:43:   required from ‘Index Eigen::internal::blas_data_mapper<Scalar, Index, StorageOrder, AlignmentType, 1>::firstAligned(Index) const [with Scalar = const double; Index = long int; int StorageOrder = 0; int AlignmentType = 0]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:400:9:   required from ‘static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/Memory.h:470:10: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  470 |   return first_aligned<unpacket_traits<DefaultPacketType>::alignment>(array, size);
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:104:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; ResultType = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1318:40:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:637:5:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:104:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; ResultType = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1316:40:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:637:5:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c glmnet_init.cpp -o glmnet_init.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c internal.cpp -o internal.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb.c -o pb.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb_exp.cpp -o pb_exp.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-ZLat0n/r-base-4.2.2.20221110=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c wls_exp.cpp -o wls_exp.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
wls_exp.cpp:40:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
wls_exp.cpp:40:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:150:32:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
glmnetpp/include/glmnetpp_bits/elnet_point/sp_gaussian_wls.hpp:7:8:   required from ‘struct glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:125:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:26:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:34:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:43:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:52:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:32:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:56:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:336:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:409:54:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:336:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:83:14:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:27:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:45:7:   required from ‘Eigen::CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Eigen::Sparse>::CwiseBinaryOpImpl() [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; Lhs = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Rhs = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:105:49:   required from ‘Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::CwiseBinaryOp(const Lhs&, const Rhs&, const BinaryOp&) [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; LhsType = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; RhsType = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:693:62:   required from ‘const typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type Eigen::SparseMatrixBase<Derived>::cwiseProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:65:36:   required from ‘Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived = Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:134:27:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:327:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::DenseBase<Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:501:10:   required from ‘Derived& Eigen::DenseBase<Derived>::setZero() [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:143:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o glmnet.so RcppExports.o coxnet5dpclean.o elnet_exp.o glmnet_init.o internal.o pb.o pb_exp.o wls_exp.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-glmnet/00new/glmnet/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘glmnet’ as ‘glmnet_4.1-7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (glmnet)
ERROR: dependency ‘speedglm’ is not available for package ‘EventPointer’
* removing ‘/tmp/tmp/built/EventPointer’

The downloaded source packages are in
	‘/tmp/RtmpZoKfNg/downloaded_packages’
Old packages: 'AnnotationDbi', 'AnVIL', 'beachmat', 'BH', 'BiocFileCache',
  'BiocManager', 'BiocParallel', 'biomaRt', 'blob', 'broom', 'bslib', 'cachem',
  'class', 'cli', 'codetools', 'colorspace', 'commonmark', 'curl',
  'data.table', 'dbplyr', 'DESeq2', 'digest', 'dplyr', 'DT', 'dtplyr', 'edgeR',
  'evaluate', 'fansi', 'fastmap', 'FNN', 'fontawesome', 'forcats', 'formatR',
  'fs', 'future', 'gargle', 'GenomeInfoDb', 'GenomicAlignments',
  'GenomicFeatures', 'GenomicRanges', 'ggplot2', 'ggrepel', 'gh',
  'googleAuthR', 'googledrive', 'googlesheets4', 'gtable', 'haven', 'highr',
  'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'igraph', 'interp',
  'IRkernel', 'isoband', 'knitr', 'lattice', 'limma', 'listenv', 'locfit',
  'lubridate', 'MASS', 'Matrix', 'mgcv', 'modelr', 'nlme', 'openssl',
  'parallelly', 'pbapply', 'pbdZMQ', 'pillar', 'pkgdown', 'progressr', 'ps',
  'purrr', 'ragg', 'RcppArmadillo', 'RcppTOML', 'RCurl', 'readr', 'readxl',
  'repr', 'reticulate', 'rlang', 'rmarkdown', 'roxygen2', 'RSQLite',
  'S4Vectors', 'sass', 'scran', 'scuttle', 'shiny', 'SingleCellExperiment',
  'sourcetools', 'sp', 'spatial', 'spatstat.data', 'spatstat.explore',
  'spatstat.geom', 'spatstat.random', 'spatstat.sparse', 'spatstat.utils',
  'statmod', 'stringi', 'survival', 'testthat', 'tibble', 'tidyr', 'tidyverse',
  'timechange', 'tinytex', 'utf8', 'vctrs', 'vroom', 'xfun', 'XML', 'yaml',
  'zoo'
Warning message:
In install.packages(...) :
  installation of package ‘EventPointer’ had non-zero exit status

real	3m15.886s
user	3m2.514s
sys	0m13.394s
